diff --git a/tutorial/TERASOLUNA Batch Framework for Java チュートリアルマニュアル.pdf b/tutorial/TERASOLUNA Batch Framework for Java チュートリアルマニュアル.pdf
index 0a20eb9..0728643 100644
--- a/tutorial/TERASOLUNA Batch Framework for Java チュートリアルマニュアル.pdf	
+++ b/tutorial/TERASOLUNA Batch Framework for Java チュートリアルマニュアル.pdf	
@@ -29,27 +29,27 @@ Batch Framework for Java 3.5.0
      とはできません。
 
 
-本ドキュメントの一部または全部を、自らが使用する目的において改変したり、本ドキュメント
-を用いた二次的著作物を作成することができます。ただし、       「TERASOLUNA Batch Framework
-for Java 3.5.0 チュートリアルマニュアル」あるいは同等の表現を、作成したドキュメントおよ
-びその複製物に記載するものとします。
+3.   本ドキュメントの一部または全部を、自らが使用する目的において改変したり、本ドキュメ
+     ントを用いた二次的著作物を作成することができます。ただし、「TERASOLUNA Batch
+     Framework for Java 3.5.0 チュートリアルマニュアル」あるいは同等の表現を、作成したド
+     キュメントおよびその複製物に記載するものとします。
 
 
-3.   前２項によって作成したドキュメントおよびその複製物を、無償の場合に限り、第三者へ提
+4.   前２項によって作成したドキュメントおよびその複製物を、無償の場合に限り、第三者へ提
      供することができます。
 
 
-4.   NTT データの書面による承諾を得ることなく、本規約に定められる条件を超えて、本ドキュ
+5.   NTT データの書面による承諾を得ることなく、本規約に定められる条件を超えて、本ドキュ
      メントおよびその複製物を使用したり、本規約上の権利の全部または一部を第三者に譲渡し
      たりすることはできません。
 
 
-5.   NTT データは、本ドキュメントの内容の正確性、使用目的への適合性の保証、使用結果につ
+6.   NTT データは、本ドキュメントの内容の正確性、使用目的への適合性の保証、使用結果につ
      いての的確性や信頼性の保証、および瑕疵担保義務も含め、直接、間接に被ったいかなる損
      害に対しても一切の責任を負いません。
 
 
-6.   NTT データは、本ドキュメントが第三者の著作権、その他如何なる権利も侵害しないことを
+7.   NTT データは、本ドキュメントが第三者の著作権、その他如何なる権利も侵害しないことを
      保証しません。また、著作権、その他の権利侵害を直接または間接の原因としてなされる如
      何なる請求(第三者との間の紛争を理由になされる請求を含む。)に関しても、NTT データは
      一切の責任を負いません。
@@ -136,47 +136,47 @@ TERASOLUNA Batch Framework for Java(以下、バッチフレームワークと
 TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
 
 
-   コンポーネント名         解説                               チュートリアル
-                                                     での使用
+   コンポーネント名         解説                          チュートリアル
+                                                での使用
    BL04             ビジネスロジック内で例外が発生した
    例外ハンドリング         場合、発生した例外をハンドリングし、
                     ジョブ終了コードを設定することがで
                     きる機能
-   BL05             ビジネスロジックを実行するためのイ                2 章の 2.2 節、2.3 節、2.4
-   ビジネスロジック実行       ンタフェース、抽象クラスの提供                  節、2.5 節、2.6 節を参照
-   BL06             MyBatis3 を利用した、O／R マッピン          2 章の 2.2 節、2.3 節、2.4
-   DB アクセス          グ機能                              節、2.6 節を参照
-   BL07             CSV や固定長ファイルを、オブジェク              2 章の 2.2 節、2.3 節、2.4
-   ファイルアクセス         トにマッピングする機能                      節、2.5 節、2.6 節を参照
+   BL05             ビジネスロジックを実行するためのイ           2 章の 2.2 節、2.3 節、2.4
+   ビジネスロジック実行       ンタフェース、抽象クラスの提供             節、2.5 節、2.6 節を参照
+   BL06             SQL を記述したマッピングファイルを         2 章の 2.2 節、2.3 節、2.4
+   DB アクセス          利用してデータベースにアクセスする           節、2.6 節を参照
+                    ための機能
+   BL07             CSV や固定長ファイルを、オブジェク         2 章の 2.2 節、2.3 節、2.4
+   ファイルアクセス         トにマッピングする機能                 節、2.5 節、2.6 節を参照
    BL08             ファイル名変更、ファイル移動、ファ
    ファイル操作           イルコピー、ファイル削除、ファイル
                     結合をするための機能
    BL09             ログ出力等で利用する文字列を管理す
    メッセージ管理          るための機能
-   AL041            データ収集を行うモジュールで、以下                2 章の 2.2 節、2.3 節、2.4
-   入力データ取得          の特徴を持つ機能                         節、2.5 節、2.6 節を参照
+   AL041            データ収集を行うモジュールで、以下           2 章の 2.2 節、2.3 節、2.4
+   入力データ取得          の特徴を持つ機能                    節、2.5 節、2.6 節を参照
                     ・データベースから大量のデータを取
                     得する際に、メモリの使用量をフェッ
                     チサイズ分のみに抑えることができる
-                    ・MyBatis3 の ResultHandler を利用し
-                    た場合と異なり、構造化プログラミン
-                    グ(while 文)にて実装できる
+                    ・構造化プログラミング(while 文)にて
+                    1 件ごとのデータ処理を実装できる
                     ・引数として、DB アクセスやファイル
                     アクセスで利用する DAO を渡す
                     ・バックグラウンドで動作するため、
                     スループットが向上する
                     ・1 件前後の値も取得できるため、コ
                     ントロールブレイクに対応できる
-   AL042            コレクタを利用して、現在読んだデー                2 章の 2.5 節を参照
+   AL042            コレクタを利用して、現在読んだデー           2 章の 2.5 節を参照
    コントロールブレイク       タと、次に読むデータで、キーが切り
                     替わるのを判定する機能
-   AL043            コレクタを利用して取得したデータに                2 章の 2.4 節を参照
+   AL043            コレクタを利用して取得したデータに           2 章の 2.4 節を参照
    入力チェック           対して入力チェックを実行する機能
                     BeanValidation を利用する
 
 
 
-                                                                       5
+                                                                  5
 TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
 
 
@@ -280,7 +280,7 @@ TERASOLUNA Batch Framework for Java(以下、バッチフレームワークと
         OS：Microsoft Windows 7 Professional
         JDK：JDK 1.7.0_xx(x はバージョン番号)
         データベース：PostgreSQL 9.3.x for Windows
-        総合開発環境：Eclipse SDK 3.7.x
+        総合開発環境：Eclipse SDK 3.7.x + Maven プラグイン
              ※Pleiades All in One 日本語ディストリビューション版
 
    インストール/開発環境の整備
@@ -377,59 +377,64 @@ TERASOLUNA Batch Framework for Java(以下、バッチフレームワークと
 TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
 
 
-              ビルドができない場合の補足
-                これまでの設定でビルドができない場合、以下の設定を「(ユーザーのホーム
-               ディレクトリ)/.m2/settings.xml」に追加し、HTTP でアクセスすること。
-               <settings>
-                   <mirrors>
-                       <mirror>
-                             <id>central</id>
-                             <mirrorOf>central</mirrorOf>
-                             <name>Central</name>
-                             <url>http://repo1.maven.org/maven2</url>
-                       </mirror>
-                   </mirrors>
-               </settings>
+                  ビルドができない場合の補足
+                    これまでの設定でビルドができない場合、以下の設定を「(ユーザーのホーム
+                   ディレクトリ)/.m2/settings.xml」に追加すると、ビルドができるようになる可
+                   能性がある。
+                   <settings>
+                       <mirrors>
+                           <mirror>
+                                 <id>central</id>
+                                 <mirrorOf>central</mirrorOf>
+                                 <name>Central</name>
+                                 <url>http://repo1.maven.org/maven2</url>
+                           </mirror>
+                       </mirrors>
+                   </settings>
 
    3.   プロジェクトの準備
-        本資料で使用するチュートリアルアプリケーションではバッチフレームワークで提供し
-        ているブランクプロジェクトを使用する。ここではワークスペースを
-                                “terasoluna-batch4j-blank_(バージョン番号).zip”フ
-        “C:¥Eclipse¥workspace”とし、
-        ァイルをワークスペース直下に展開する。
+
+        (1).   本資料で使用するチュートリアルアプリケーションではバッチフレームワークで
+               提供しているブランクプロジェクトを使用する。ここではワークスペースを
+               “C:¥Eclipse¥workspace”とし、“terasoluna-batch4j-blank_(バージョン番
+               号).zip”ファイルをワークスペース直下に展開する。
+        (2).   展開したフォルダー「terasoluna-batch-blank」のフォルダー名を「tutorial」に
+               変更する。
+        (3).   「tutorial」直下にある「pom.xml」を開き、プロジェクトの情報を編集する。こ
+               こでは、<groupId>、<artifactId>、<version>、<name>、<description>タグの
+               値をそれぞれ以下の通り修正する。
+                   <project xmlns="http://maven.apache.org/POM/4.0.0"
+                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+                       xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
+                   http://maven.apache.org/xsd/maven-4.0.0.xsd">
+                       <modelVersion>4.0.0</modelVersion>
+                       <groupId>jp.terasoluna.batch</groupId>
+                       <artifactId>tutorial</artifactId>
+                       <version>1.0.0-SNAPSHOT</version>
+                       <name>My Tutorial Project</name>
+                       <description>My Tutorial Project</description>
+
+
+                       <repositories>
+                       …(省略)…
+
+                                                                               10
+TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
+
 
    4.   プロジェクトのインポート
-        「3 プロジェクトの準備」で作成した
-        “C:¥Eclipse¥workspace¥terasoluna-batch-blank”を Eclipse で編集できるようにイ
-        ンポートする。
+        「3 プロジェクトの準備」で作成した“C:¥Eclipse¥workspace¥tutorial”を Eclipse で
+        編集できるようにインポートする。
 
         (1). Eclipse を起動する。
         (2). ｢ファイル」→「インポート｣を選択する。
         (3). 選択画面では｢Maven＞Existing Maven Projects」     「次へ」
                                                   を選択して、   を押下する。
         (4). ｢Import Maven Projects」画面ではルートディレクトリの選択欄に
-           “C:¥Eclipse¥workspace¥terasoluna-batch-blank”を指定し、「/pom.xml
-           xxxxxx.yyyyyy.zzzzzz:terasoluna-batch-blank:(バージョン番号).jar」にチェックが
-           入っていることを確認して、「完了」を押下する。
-        (5). パッケージエクスプローラーの“terasoluna-batch-blank”を右クリックし、
-                                                          「リフ
-                              「新しい名前」のテキストボックスに
-           ァクタリング」→「名前の変更」を選択し、
-           “tutorial”と入力し「OK」を押下する。
-        (6). パッケージエクスプローラーの“pom.xml”選択し、アーティファクト Id のテキス
-           トボックスに“tutorial”と入力し、保存する。
-
-
-
-
-                                                                         10
-TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
-
-
-        (7). パッケージエクスプローラーの“tutorial”を右クリックし、
-                                            「Maven＞プロジェク
-               トの更新」を選択し、“tutorial”にチェックがついていることを確認し、「OK」を
-               押下する。
+                                                  「/pom.xml
+               “C:¥Eclipse¥workspace¥tutorial”を指定し、
+               jp.terasoluna.batch:tutorial:1.0.0-SNAPSHOT:jar」にチェックが入っていること
+               を確認して、「完了」を押下する。
 
    5.   データベースの設定
         (1).       PostgreSQL9.3.x のインストールを行う。
@@ -457,21 +462,19 @@ TERASOLUNA Batch Framework for Java(以下、バッチフレームワークと
    6.   入力ファイルの取得
         「2.3 入力がファイル、出力が DB である場合のジョブ(同期型ジョブ実行)」および「2.4
         入力チェック機能を利用した、入力がファイル、出力が DB である場合のジョブ(同期型
-              、
-        ジョブ実行)」「2.5 コントロールブレイク機能を利用した、入力がファイル、出力がフ
-        ァイルである場合のジョブ(同期型ジョブ実行)」で使用するファイルを以下の手順で取
-        得する。
-        (1). パッケージエクスプローラーで、“tutorial”プロジェクトを右クリックする。
-        (2). 「新規」→「フォルダー」を選択し、フォルダー名に“inputFile”と入力し「完了」
-               を押下する。
-
 
 
-
-                                                                       11
+                                                                          11
 TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
 
 
+                、
+          ジョブ実行)」「2.5 コントロールブレイク機能を利用した、入力がファイル、出力がフ
+          ァイルである場合のジョブ(同期型ジョブ実行)」で使用するファイルを以下の手順で取
+          得する。
+          (1). パッケージエクスプローラーで、“tutorial”プロジェクトを右クリックする。
+          (2). 「新規」→「フォルダー」を選択し、フォルダー名に“inputFile”と入力し「完了」
+             を押下する。
           (3). チュートリアル完成版プロジェクト“terasoluna-batch-tutorial¥inputFile”フォ
              ルダー内にある“SMP002_input.csv” SMP003_input.csv” SMP004_input.csv”
                                       “
@@ -511,8 +514,6 @@ TERASOLUNA Batch Framework for Java(以下、バッチフレームワークと
      システム利用 DAO 定義(PostgreSQL)が有効になっていることを確認する。
 
 
-
-
                                                                        12
 TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
 
@@ -659,37 +660,38 @@ TERASOLUNA Batch Framework for Java(以下、バッチフレームワークと
 
 
 
+
                                      DB 入力、ファイル出力
                                      時のオブジェクトクラス
 
 
+
                                      ビジネスロジッククラス
 
-                                     DAO インタフェース
+                                      DAO インタフェース
 
 
 
 
-                                      ジョブ Bean 定義ファイ
-                                      ル
+                                     ジョブ Bean 定義ファイ
+                                     ル
 
 
 
 
-                                    MyBatis3 の SQL 定義フ
-                                    ァイル
+                                      マッピングファイル
 
 
 
 
                       凡例
-                                          ※赤線で囲まれたファイル
-                                          は本節で作成／変更を行う。
+                                         ※赤線で囲まれたファイル
+                                         は本節で作成／変更を行う。
 
 
 
 
-                                                          17
+                                                         17
 TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
 
 
@@ -728,7 +730,6 @@ TERASOLUNA Batch Framework for Java(以下、バッチフレームワークと
 
 
    2.   マッピングファイル
-        MyBatis3 の定義ファイルであり、SQL 定義情報を記述する。
         [手順]
         (1). “SMP001Dao.xml”を作成
             i.                 “tutorial¥src¥main¥resources”フォルダー
@@ -742,6 +743,8 @@ TERASOLUNA Batch Framework for Java(以下、バッチフレームワークと
           iii.   “SMP001Dao.xml”を以下のように編集する。
 
 
+
+
                                                                                      18
 TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
 
@@ -1312,11 +1315,13 @@ public class SMP001BLogic extends AbstractTransactionBLogic {
 
 
 
+
                                      ファイル入力、DB 出力
                                      時のオブジェクトクラス
 
 
 
+
                                       ビジネスロジッククラス
 
                                       DAO インタフェース
@@ -1329,21 +1334,19 @@ public class SMP001BLogic extends AbstractTransactionBLogic {
 
 
 
-
-                                     MyBatis3 の SQL 定義フ
-                                     ァイル
+                                     マッピングファイル
 
 
 
 
                        凡例
-                                           ※赤線で囲まれたファイル
-                                           は本節で作成／変更を行う。
+                                          ※赤線で囲まれたファイル
+                                          は本節で作成／変更を行う。
 
 
 
 
-                                                           32
+                                                          32
 TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
 
 
@@ -1383,7 +1386,6 @@ public class SMP001BLogic extends AbstractTransactionBLogic {
 
 
    2.   マッピングファイル
-        MyBatis3 の定義ファイルであり、SQL 定義情報を記述する。
         [手順]
         (1). “SMP002Dao.xml”を作成
             i.                 “tutorial¥src¥main¥resources”フォルダー
@@ -1397,6 +1399,7 @@ public class SMP001BLogic extends AbstractTransactionBLogic {
           iii.   “SMP002Dao.xml”を以下のように編集する。
 
 
+
                                                                                      33
 TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
 
@@ -1731,11 +1734,13 @@ public class SMP002BLogic extends AbstractTransactionBLogic {
 
 
 
+
                                                  DB
                                           ファイル入力、 出力時の
                                           オブジェクトクラス
 
 
+
                                           拡張入力チェックエラーハ
                                           ンドラクラス
 
@@ -1752,8 +1757,7 @@ public class SMP002BLogic extends AbstractTransactionBLogic {
 
 
 
-                                              MyBatis3 の SQL 定義ファ
-                                              イル
+                                          マッピングファイル
 
 
 
@@ -1764,60 +1768,60 @@ public class SMP002BLogic extends AbstractTransactionBLogic {
 
 
 
-                                                               41
+                                                            41
 TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
 
 
-  2.4.1. 定義ファイルの作成
-        ジョブ Bean 定義ファイル
-        マッピングファイル
+ 2.4.1. 定義ファイルの作成
+       ジョブ Bean 定義ファイル
+       マッピングファイル
 
-    1.   ジョブ Bean 定義ファイル
-         [手順]
-         (1). “SMP003.xml”を作成
-              i.   パッケージエクスプローラーで、“tutorial¥src¥main¥resources¥beansDef”
-                   フォルダーを右クリックする。
-           ii.     「新規」→「ファイル」を選択し、ファイル名に“SMP003.xml”と入力し「完
-                   了」を押下する。
-          iii.                 に
-                   “SMP003.xml” “tutorial¥src¥main¥resources¥beansDef¥B000001.xml”
-                   の内容をコピーし、以下のように変更する。
+   1.   ジョブ Bean 定義ファイル
+        [手順]
+        (1). “SMP003.xml”を作成
+            i.   パッケージエクスプローラーで、“tutorial¥src¥main¥resources¥beansDef”
+                 フォルダーを右クリックする。
+          ii.    「新規」→「ファイル」を選択し、ファイル名に“SMP003.xml”と入力し「完
+                 了」を押下する。
+          iii.               に
+                 “SMP003.xml” “tutorial¥src¥main¥resources¥beansDef¥B000001.xml”
+                 の内容をコピーし、以下のように変更する。
 
   変更前
-    <!-- コンポーネントスキャン設定 -->
-    <context:component-scan base-package="jp.terasoluna.batch.sample.b000001" />
+  <!-- コンポーネントスキャン設定 -->
+  <context:component-scan base-package="jp.terasoluna.batch.sample.b000001" />
 
   変更後
-    <!-- コンポーネントスキャン設定 -->
-    <context:component-scan base-package="jp.terasoluna.batch.tutorial.sample003" />
+  <!-- コンポーネントスキャン設定 -->
+  <context:component-scan base-package="jp.terasoluna.batch.tutorial.sample003" />
 
 
-    <!-- SMP003Dao設定 -->
-    <bean class="org.mybatis.spring.mapper.MapperFactoryBean">
-         <property name="mapperInterface"
-value="jp.terasoluna.batch.tutorial.sample003.SMP003Dao" />
-         <property name="sqlSessionTemplate" ref="sqlSessionTemplate" />
-    </bean>
+  <!-- SMP003Dao設定 -->
+  <bean class="org.mybatis.spring.mapper.MapperFactoryBean">
+        <property name="mapperInterface"
+            value="jp.terasoluna.batch.tutorial.sample003.SMP003Dao" />
+        <property name="sqlSessionTemplate" ref="sqlSessionTemplate" />
+  </bean>
 
 
 
-    2.   マッピングファイル
-         MyBatis3 の定義ファイルであり、SQL 定義情報を記述する。
-         [手順]
-         (2). “SMP002Dao.xml”を作成
-              i.                 “tutorial¥src¥main¥resources”フォルダー
-                   パッケージエクスプローラーで、
-                   を右クリックする。
-           ii.                    「親フォルダーを入力または選択」に
-                   「新規」→「ファイル」を選択し、
-                                                                                      、ファ
-                   “tutorial/src/main/resources/jp/terasoluna/batch/tutorial/sample003”
-                   イル名に“SMP003Dao.xml”と入力し「完了」を押下する。
-          iii.     “SMP003Dao.xml”を以下のように編集する。
+   2.   マッピングファイル
+        [手順]
+        (2). “SMP002Dao.xml”を作成
+            i.                 “tutorial¥src¥main¥resources”フォルダー
+                 パッケージエクスプローラーで、
+                 を右クリックする。
+          ii.                   「親フォルダーを入力または選択」に
+                 「新規」→「ファイル」を選択し、
+                                                                                    、ファ
+                 “tutorial/src/main/resources/jp/terasoluna/batch/tutorial/sample003”
+                 イル名に“SMP003Dao.xml”と入力し「完了」を押下する。
+          iii.   “SMP003Dao.xml”を以下のように編集する。
 
 
 
-                                                                                       42
+
+                                                                                     42
 TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
 
 
@@ -2472,11 +2476,11 @@ public class SMP003BLogic extends AbstractTransactionBLogic {
 
 
 
+
                                          ファイル入力時のオブジェ
                                          クトクラス
 
 
-
                                          ファイル出力時のオブジェ
                                          クトクラス
 
@@ -3004,7 +3008,7 @@ public class SMP004BLogic extends AbstractTransactionBLogic {
 
        [2015/**/** **:**:**] [main] [j.t.b.t.s.SMP004BLogic] [INFO ] ファイル書き込みが
        正常に終了しました。
-       [2015/01/07 09:56:10] [main] [j.t.f.b.e.SyncBatchExecutor] [INFO ] [IAL025015]
+       [2015/**/** **:**:**] [main] [j.t.f.b.e.SyncBatchExecutor] [INFO ] [IAL025015]
        SyncBatchExecutor END blogicStatus:[0]
 
 
@@ -3104,8 +3108,9 @@ public class SMP004BLogic extends AbstractTransactionBLogic {
 
 
 
-                                          DB、ファイル入出力時のオブ
-                                          ジェクトクラス
+
+                                     DB、ファイル入出力時のオブ
+                                     ジェクトクラス
 
 
 
@@ -3123,24 +3128,21 @@ public class SMP004BLogic extends AbstractTransactionBLogic {
 
 
 
-                                     MyBatis3 の SQL 定義フ
-                                     ァイル
+                                      マッピングファイル
 
 
 
 
                       凡例
-                                           ※赤線で囲まれたファイル
-                                           は本節で作成／変更を行う。
+                                          ※赤線で囲まれたファイル
+                                          は本節で作成／変更を行う。
 
 
 
-                                                           69
+                                                          69
 TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
 
 
-
-
   2.6.1. 定義ファイルの作成
        ジョブ Bean 定義ファイル
        マッピングファイル
@@ -3176,7 +3178,6 @@ public class SMP004BLogic extends AbstractTransactionBLogic {
 
 
    2.   マッピングファイル
-        MyBatis3 の定義ファイルであり、SQL 定義情報を記述する。
         [手順]
         (1). “SMP005Dao.xml”を作成
             i.                 “tutorial¥src¥main¥resources”フォルダー
@@ -3188,6 +3189,10 @@ public class SMP004BLogic extends AbstractTransactionBLogic {
                  “tutorial/src/main/resources/jp/terasoluna/batch/tutorial/sample005”
                  イル名に“SMP005Dao.xml”と入力し「完了」を押下する。
           iii.   “SMP005Dao.xml”を以下のように編集する。
+
+
+
+
                                                                                      70
 TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
 
@@ -3203,7 +3208,7 @@ public class SMP004BLogic extends AbstractTransactionBLogic {
     <!-- データ取得 -->
     <!-- 入出金テーブル -->
     <select id="collectNyusyukkinData"
-        resultType="jp.terasoluna.batch.tutorial.common.NyusyukkinData" >
+        resultType="jp.terasoluna.batch.tutorial.common.NyusyukkinData">
         SELECT
         SHITENNAME AS "shitenName"
         ,KOKYAKUID AS "kokyakuId"
@@ -3236,7 +3241,7 @@ public class SMP004BLogic extends AbstractTransactionBLogic {
 
 
 
-                                                                            71
+                                                                           71
 TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
 
 
@@ -3549,8 +3554,8 @@ public class SMP005BLogic extends AbstractTransactionBLogic {
        フレームワーク： TERASOLUNA Batch Framework for Java 3.5.0
        OS：Microsoft Windows 7 Professional
        JDK：JDK 1.7.0_xx(x はバージョン番号)
-       データベース：Oracle Database Express Edition 12c
-       総合開発環境：Eclipse SDK 3.7.x
+       データベース：Oracle Database 12c
+       総合開発環境：Eclipse SDK 3.7.x + Maven プラグイン
          ※Pleiades All in One 日本語ディストリビューション版
 
    インストール/開発環境の整備
@@ -3576,52 +3581,61 @@ public class SMP005BLogic extends AbstractTransactionBLogic {
 TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
 
 
-   4    プロジェクトのインポート
-        「2.1 チュートリアル学習環境の整備」を参照のこと。
+   4   プロジェクトのインポート
+       「2.1 チュートリアル学習環境の整備」を参照のこと。
 
-   5    データベースの設定
-        5.1   Oracle を任意のディレクトリにインストールする。本チュートリアルでは、以下
-              のようにインストールしたと仮定する。
-                  ソフトウェアの場所：C:¥oracleexe¥app¥oracle¥product¥12.1.0¥tutorial
-
-        5.2   データベースを作成する。ここでは以下のように設定する。
-                  データベースサーバの IP アドレス：127.0.0.1
-                  ポート：1521
-                  データベース名：XE
-                  SID 名：XE
-
-        5.3   SQL*Plus などを利用してユーザーを作成する。ここでは以下のユーザーを作成す
-              る。
-                  ユーザー名：tutorial
-                  パスワード：tutorial
-                  アクセス権限：テーブル作成、データの挿入、選択、削除が行える
-                  ※備考
-                  設定方法については Oracle のマニュアルを参照のこと。
+   5   データベースの設定
+       5.1   Oracle を任意のディレクトリにインストールし、データベースを作成する。ここ
+             では以下のように設定したと仮定する。
+                Oracle ベース：C:¥oracleexe¥app¥oracle
+                ソフトウェアの場所：C:¥oracleexe¥app¥oracle¥product¥12.1.0¥tutorial
+                データベース・ファイルの位置：C:¥oracleexe¥app¥oracle¥oradata
+                キャラクタ・セット：(デフォルト)
+                グローバル・データベース名：XE
+                管理パスワード：(任意の文字列)
+                プラガブル・データベース名：pdborcl
 
-   6    入力ファイルの取得
-        「2.1 チュートリアル学習環境の整備」を参照のこと。
+       5.2   SQL*Plus などを利用してユーザーを作成する。ここでは以下のユーザーを作成す
+             る。
+                ユーザー名：tutorial
+                パスワード：tutorial
+                アクセス権限：ALL PRIVILEGES
+
+       5.3   Net Configuration Assistant などを利用して接続情報を作成する。ここでは以下
+             のように設定する。
+                サービス名：pdborcl
+                プロトコル：TCP
+                ホスト名：127.0.0.1
+                ポート番号：1521
+
+         ※備考
+         インストール方法や接続設定等についての詳細は Oracle のマニュアルを参照のこと。
+
+   6   入力ファイルの取得
+       「2.1 チュートリアル学習環境の整備」を参照のこと。
+
+   7   ファイルの出力先の作成
+       「2.1 チュートリアル学習環境の整備」を参照のこと。
+
+   8   “jdbc.properties の修正”
+       “tutorial¥src¥main¥resources¥mybatisAdmin”フォルダーと
+       “tutorial¥src¥main¥resources¥mybatis”フォルダーにある“jdbc.properties”を以
+       下のように書き換える。
+
+
+                                                                         79
+TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
 
-   7    ファイルの出力先の作成
-        「2.1 チュートリアル学習環境の整備」を参照のこと。
 
-   8    “jdbc.properties の修正”
-        “tutorial¥src¥main¥resources¥mybatisAdmin”フォルダーと
-        “tutorial¥src¥main¥resources¥mybatis”フォルダーにある“jdbc.properties”を以
-        下のように書き換える。
        #ドライバー
        jdbc.driver=oracle.jdbc.OracleDriver
        #URL
-       jdbc.url=jdbc:oracle:thin:@127.0.0.1:1521:xe
+       jdbc.url=jdbc:oracle:thin:@127.0.0.1:1521/PDBORCL
        #ユーザー名
        jdbc.username=tutorial
        #パスワード
        jdbc.password=tutorial
 
-
-                                                                           79
-TERASOLUNA Batch Framework for Java 3.5.0 チュートリアルマニュアル
-
-
    9    “AdminDataSource.xml の修正”
         この節では Oracle を使用するため、
         “tutorial ¥src¥main¥resources¥beansAdminDef”フォルダーにある
